# Set Up Session
## Initialize Bioconductor
```{r}
#if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
print(.libPaths())

## Install or update packages from _Bioconductor_, CRAN, and GitHub.
BiocManager::install(version = "3.10", lib="/home/mikeg/R/x86_64-pc-linux-gnu-library/3.6")
```


## Work with Vignette 
```{r}
print("test")
library(SummarizedExperiment)
## Note it's necessary to set the lib argument, or else, for reasons I don't understand, it tries to use the global lib path
BiocManager::install("airway", lib="/home/mikeg/R/x86_64-pc-linux-gnu-library/3.6")
data(airway, package="airway") 
se <- airway
se
```

## Work with C. elegans data

```{r}
## load data object experimentSummary
## Note the real data seems to be embedded within this "SimpleList" object
load("E-MTAB-2812-atlasExperimentSummary.Rdata")
ranges(experimentSummary$rnaseq)

rse  <- experimentSummary$rnaseq

## Despite being a RangedSummarizedExperiment (RSE) object, the rowRanges info doesn't seem to be used
rowRanges(rse)

## Following lines taken from RSE help page
dim(rse)
assayNames(rse)
head(assay(rse))
rowData(rse)
colData(rse)

unique(rse[[1,]])

colnames(rse)
## create a filtereD version of rse by subsetting it
## Filter out males and try to predict their expression afterwards using residuals
frse  <-  subset(rse, select = (sex == "hermaphrodite" & organism_part == "organism" & genotype =="wild type genotype") ) # drop argument doesn't seem to work
unique(frse$sex)
unique(frse$organism_part)
unique(frse$genotype)
unique(frse$developmental_stage)
unique(frse$technical_replicate_group)
colData(frse)


## Help pages for base::subset suggests not using it within scripts but use [] instead
## This doesn't seem to work properly
trse <- rse[ (rse$sex == "hermaphrodite" & rse$organism_part == "organism" & rse$genotype =="wild type genotype"), ]  

```
### Description of RSE object
- Genes are in rows, experimental data in columns
- colnames(): SSRR00XXX are the specific experimental data ID for WormBase
- colData() gives one access to meta data for each column, such as stage, tissue
"Sample meta-data describing the samples can be accessed using colData(), and is a DataFrame that can store any number of descriptive columns for each sample row."
- technical_replicate_group seems to be a factor that allows one to group replicates together


