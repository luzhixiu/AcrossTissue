
R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> setwd('/home/mikeg/Repositories/AcrossTissue/MikesWork/2020/08/06_Fit.ROC.to.Sequences-Long.Fit.Using.Previous.Starting.Values/')
> 
## Clear out any previously defined objects and parameters
> rm(list=ls())
> ## Load Needed Libraries
> library(tidyr)
> library(tibble)
> library(readr)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(stringr)
> library(forcats)
> library(knitr)
> library(purrr)
> library(AnaCoDa, verbose = TRUE, lib.loc = "~/R/x86_64-pc-linux-gnu-library/3.6") ## Could use Version(); if it's not there build locally using script
Loading required package: Rcpp
Loading required package: VGAM
Loading required package: stats4
Loading required package: splines

Attaching package: ‘VGAM’

The following object is masked from ‘package:tidyr’:

    fill

> ## library(profmem, verbose = TRUE)  #is this still necessary?
> 
> 
> saveImage <- TRUE ## Save image of session at end of each round of fitting?
## Use this function when creating (or recreating for plotting) genomes
> myCreateGenomeObject <- function(fasta.file, gene.index = NULL){
+     ## Make sure gene.index is a list, if it's not make it one.
+     if( !is.list(gene.index) ) gene.index <- list(gene.index) 
+     if( length(fasta.file) .... [TRUNCATED] 
> + + > 
input.dir <- "./Input/"  ## Location of FASTA and possibly empirical phi
> output.dir <- "./Output/"
> fasta.file <- paste0(input.dir, "c_elegans.PRJNA13758.WS277.CDS_transcripts.fa")
> . + > 
load("./Input/session.image.RData")
> ## Remove dangling objects
> rm("mcmc", "genome", "parameter", "model")
> previous.max.round  <- max.round
> max.round <- 2 ## Max number of rounds of fitting
> which.model="ROC"
> which.genome = "monoform" # monoform or nuclear
> sample.genome = FALSE #whether to create a subsample of the genome
> set.seed = TRUE # flag for setting random seed
> sample.seed = 2397502  # random seed for sampling genome
> gene.sample.size <- 1500 ## number of genes to use in fitting
> ## Local settings
> with.phi  <-  FALSE
> init_sphi <- 1.8 ## initial value for s_phi
> ## Hyperparameters include s_phi, measurement error, and ??
> est.hyper  <- TRUE ## FALSE keeps s_phi fixed
> mixDef <- "allUnique"
> runConvergenceTests <- FALSE
> initial.divergence <- 0  ## # of divergence.iterations on round 1
> samples <- c(2000,2000)  ## steps determined by samples * thin
> thinning <- 20    ## only 1/thin steps (iterations) are kept (in memory?)
> adaptive.width <- 100  ## adaptive width, in units of samples
> steps <- samples * thinning 
> ## ncores <- (as.integer(system(command="nproc"))-1) #use n local cores -1
> ## could use `detectCores()` from library(parallel)
> ncores <- 4 ## 3 or 4 is good for cheoah
> adaptive.ratio <- c(0.5, 0) # proportion of samples to run with adaptive proposal widths
> adaptive.steps <- steps * adaptive.ratio
> samples.to.keep <- (1 - adaptive.ratio) * samples # Saves relative to last sample
> ## max.mixture <- 1
> ## mixture.sizes <- rep(0, max.mixture)
> . + > 
## Functions available for Objects
> methods(class = "Rcpp_ROCParameter")
[1] .DollarNames         $                    $<-                 
[4] coerce               coerce<-             initialize          
[7] plot                 show                 writeParameterObject
see '?methods' for accessing help and source code
> methods(class = "Rcpp_ROCModel")
[1] .DollarNames $            $<-          coerce       coerce<-    
[6] initialize   plot         show        
see '?methods' for accessing help and source code
> methods(class = "Rcpp_ROCTrace") ## stored as part of parameter object
no methods found
> methods(class = "Rcpp_Genome")
[1] .DollarNames $            $<-          coerce       coerce<-    
[6] initialize   length       show         summary     
see '?methods' for accessing help and source code
> methods(class = "Rcpp_MCMCAlgorithm")
[1] .DollarNames     $                $<-              coerce          
[5] coerce<-         convergence.test initialize       plot            
[9] show            
see '?methods' for accessing help and source code
> + > 
##load("./Input/all.nuclear.and.monoform.gene.lists.Rdata")
> names(nuclearGenes)
[1] "names"       "width"       "isoform.ID"  "WormBase.ID" "index"      
[6] "n.isoform"  
> . + > 
## create index for filtering genome
> tmpGenes <- eval(str2lang(paste0(which.genome, "Genes")))
> tmpIndex  <- tmpGenes$index ## Indexing is relative to order in full genome fasta file
> ## Should check to make sure ID's match indexes
> ## Or could revise getGenes to take IDs as well as indices
> if(sample.genome == FALSE){
+     sampleIndex  <- tmpIndex
+ } else
+ {
+     if(set.seed == TRUE) set.seed(sample.seed)
+     sampleIndex <- sort(sample(tmpIndex, gene.sample.size))
+ }
> expectedIDs <- filter(tmpGenes, index %in% sampleIndex)$isoform.ID
> length(expectedIDs)
[1] 15581
> . + > 
genome <- myCreateGenomeObject(fasta.file= fasta.file, sampleIndex)
[1] "Using file ./Input/c_elegans.PRJNA13758.WS277.CDS_transcripts.fa"
[1] "length(combined.index) = 15581"
> genomeIDs <- getNames(genome)  #really get IDs
> genome.length <- length(genomeIDs)
> matchID <- expectedIDs == genomeIDs
> if(sum(matchID) == gene.sample.size) print("All isoform.IDs match!")
> . + > 
## Create output directories if needed
> output.folder.list <- c("Graphs", "Restart", "Parameters", "R.Objects", "Run.Info")
> tmp <- lapply(output.folder.list, function(x){
+     tmpDir <- paste0(output.dir, x)
+     if(!dir.exists(tmpDir)) dir.create(tmpDir, recursive = TRUE)
+ }
+ )
> . + > 
round <- 1
> #while(round <= max.round){
> 
> 
    input.restart.file <- paste0(output.dir,"Restart/rstart.round.", round - 1, ".rst")
> 
    output.restart.file <- paste0(output.dir,"Restart/rstart.round.", round, ".rst")
> 
    if(round==1){ #initial set up
+         ## Initialize parameter object
+         ## Set initial phi value
+         input.restart.file <- paste0(input.dir,"Restart/rstart.round.", previous.max.round, ".rst")
+     }
> parameter <-
+     initializeParameterObject(
+         genome = genome,
+         init.with.restart.file = input.restart.file,
+         model=which.model)
read
0> divergence.iteration <- 0
> 
    ## Initialize model object
> model <- initializeModelObject(parameter = parameter, model = which.model, with.phi = with.phi)
> 
    ## Save model object here?
> 
> 
    ## Initialize MCMC and Model Object
> 
    mcmc <- initializeMCMCObject(samples=samples[round],
+                                  thinning=thinning,
+                                  adaptive.width=adaptive.width,
+                                  est.expr .... [TRUNCATED] 
> 
    ## Set steps for adaptive algorithm 
> 
    mcmc$setStepsToAdapt(adaptive.steps[round])
> 
    ## Set up restart files
> setRestartSettings(mcmc = mcmc,
+                    filename = output.restart.file,
+                    samples = adaptive.width,
+                    write.multiple = FALSE)  
> 
    ## run mcm
> sys.runtime<-system.time(
+ runMCMC(mcmc = mcmc, genome = genome, model = model, ncores = ncores, divergence.iteration = divergence.iteration)
+ )
Allowing divergence from initial conditions for 0 iterations.

maxGrouping: 22
Type: 
Starting MCMC
	Estimate Codon Specific Parameters? TRUE 
	Estimate Hyper Parameters? TRUE 
	Estimate Synthesis rates? TRUE 
	Starting MCMC with 40000 iterations
	Adapting will stop after 20000 steps

 *** caught segfault ***
address 0x56178db95d38, cause 'memory not mapped'

Traceback:
 1: .External(list(name = "CppMethod__invoke_void", address = <pointer: 0x5615440bdee0>,     dll = list(name = "Rcpp", path = "/usr/lib/R/site-library/Rcpp/libs/Rcpp.so",         dynamicLookup = TRUE, handle = <pointer: 0x5615450b84c0>,         info = <pointer: 0x561542eb0310>), numParameters = -1L),     <pointer: 0x561546de8810>, <pointer: 0x561545841060>, .pointer,     ...)
 2: mcmc$run(genome, model, ncores, divergence.iteration)
 3: runMCMC(mcmc = mcmc, genome = genome, model = model, ncores = ncores,     divergence.iteration = divergence.iteration)
 4: system.time(runMCMC(mcmc = mcmc, genome = genome, model = model,     ncores = ncores, divergence.iteration = divergence.iteration))

Possible actions:
1: abort (with core dump, if enabled)
2: normal R exit
3: exit R without saving workspace
4: exit R saving workspace
Selection: 
 *** caught segfault ***
address 0x561b54dd0438, cause 'memory not mapped'

Traceback:
 1: .External(list(name = "CppMethod__invoke_void", address = <pointer: 0x5615440bdee0>,     dll = list(name = "Rcpp", path = "/usr/lib/R/site-library/Rcpp/libs/Rcpp.so",         dynamicLookup = TRUE, handle = <pointer: 0x5615450b84c0>,         info = <pointer: 0x561542eb0310>), numParameters = -1L),     <pointer: 0x561546de8810>, <pointer: 0x561545841060>, .pointer,     ...)
 2: mcmc$run(genome, model, ncores, divergence.iteration)
 3: runMCMC(mcmc = mcmc, genome = genome, model = model, ncores = ncores,     divergence.iteration = divergence.iteration)
 4: system.time(runMCMC(mcmc = mcmc, genome = genome, model = model,     ncores = ncores, divergence.iteration = divergence.iteration))

Possible actions:
1: abort (with core dump, if enabled)
2: normal R exit
3: exit R without saving workspace
4: exit R saving workspace
Selection: 
 *** caught segfault ***
address 0x56273fdc25e0, cause 'memory not mapped'

 *** caught segfault ***
address 0x5617f0f5d950, cause 'memory not mapped'

Traceback:
 1: .External(list(name = "Rcpp", address = <pointer: 0x5615440bdee0>,     dll = list(name = "Rcpp", path = "/usr/lib/R/site-library/Rcpp/libs/Rcpp.so",         dynamicLookup = TRUE, handle = <pointer: 0x5615450b84c0>,         info = <pointer: 0x561542eb0310>), numParameters = -1L),     <pointer: 0x561546de8810>, <pointer: 0x561545841060>, .pointer,     ...)
 2: mcmc$run(genome, model, ncores, divergence.iteration)
 3: runMCMC(mcmc = mcmc, genome = genome, model = model, ncores = ncores,     divergence.iteration = divergence.iteration)
 4: system.time(runMCMC(mcmc = mcmc, genome = genome, model = model,     ncores = ncores, divergence.iteration = divergence.iteration))

Possible actions:
1: abort (with core dump, if enabled)
2: normal R exit
3: exit R without saving workspace
4: exit R saving workspace
Selection: 
Traceback:
 1: .External(list(name = "CppMethod__invoke_void", address = <pointer: 0x5615440bdee0>,     dll = list(name = "Rcpp", path = "/usr/lib/R/site-library/Rcpp/libs/Rcpp.so",         dynamicLookup = TRUE, handle = <pointer: 0x5615450b84c0>,         info = <pointer: 0x561542eb0310>), numParameters = -1L),     <pointer: 0x561546de8810>, <pointer: 0x561545841060>, .pointer,     ...)
 2: mcmc$run(genome, model, ncores, divergence.iteration)
 3: runMCMC(mcmc = mcmc, genome = genome, model = model, ncores = ncores,     divergence.iteration = divergence.iteration)
 4: system.time(runMCMC(mcmc = mcmc, genome = genome, model = model,     ncores = ncores, divergence.iteration = divergence.iteration))

Possible actions:
1: abort (with core dump, if enabled)
2: normal R exit
3: exit R without saving workspace
4: exit R saving workspace
Selection: 3

Process R exited abnormally with code 70 at Thu Aug  6 23:07:14 2020
